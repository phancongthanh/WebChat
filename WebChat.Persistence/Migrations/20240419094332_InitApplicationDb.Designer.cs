// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebChat.Persistence.Contexts;

#nullable disable

namespace WebChat.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240419094332_InitApplicationDb")]
    partial class InitApplicationDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Default")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebChat.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversation", "Default");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.ConversationMember", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<long[]>("HiddenMessageIds")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("LoadFromId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceivedToId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeenToId")
                        .HasColumnType("bigint");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationMember", "Default");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.Friendship", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FriendAlias")
                        .HasColumnType("text");

                    b.Property<bool>("IsFriend")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friendship", "Default");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupId");

                    b.HasIndex("ConversationId")
                        .IsUnique();

                    b.ToTable("Group", "Default");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MessageId"));

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ConversationId", "MessageId");

                    b.ToTable("Message", "Default");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("ConversationId")
                        .IsUnique();

                    b.ToTable("User", "Default");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.ConversationMember", b =>
                {
                    b.HasOne("WebChat.Domain.Entities.Conversation", null)
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebChat.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebChat.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("WebChat.Domain.Entities.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebChat.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebChat.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebChat.Domain.Entities.FriendRequest", "Request", b1 =>
                        {
                            b1.Property<Guid>("FriendshipUserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("FriendshipFriendId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("SendTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FriendshipUserId", "FriendshipFriendId");

                            b1.ToTable("Friendship", "Default");

                            b1.WithOwner()
                                .HasForeignKey("FriendshipUserId", "FriendshipFriendId");
                        });

                    b.OwnsOne("WebChat.Domain.ValueObjects.PhoneNumber", "FriendPhone", b1 =>
                        {
                            b1.Property<Guid>("FriendshipUserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("FriendshipFriendId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SubscriberNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FriendshipUserId", "FriendshipFriendId");

                            b1.ToTable("Friendship", "Default");

                            b1.WithOwner()
                                .HasForeignKey("FriendshipUserId", "FriendshipFriendId");
                        });

                    b.Navigation("FriendPhone");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.Group", b =>
                {
                    b.HasOne("WebChat.Domain.Entities.Conversation", null)
                        .WithOne()
                        .HasForeignKey("WebChat.Domain.Entities.Group", "ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("WebChat.Domain.Entities.GroupMember", "Members", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("JoinBy")
                                .HasColumnType("text");

                            b1.Property<DateTime>("JoinDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Role")
                                .HasColumnType("integer");

                            b1.HasKey("GroupId", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("GroupMember", "Default");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");

                            b1.HasOne("WebChat.Domain.Entities.User", null)
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsOne("WebChat.Domain.Entities.GroupSetting", "Setting", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("AllowChangeGName")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AllowSendGInvitation")
                                .HasColumnType("boolean");

                            b1.Property<string>("GroupCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("JoinGroupByLink")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MembershipApproval")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ReadRecentMessage")
                                .HasColumnType("boolean");

                            b1.HasKey("GroupId");

                            b1.HasIndex("GroupCode");

                            b1.ToTable("GroupSetting", "Default");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.OwnsMany("WebChat.Domain.Entities.JoinInvitation", "JoinInvitations", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("SendTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("GroupId", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("JoinInvitation", "Default");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");

                            b1.HasOne("WebChat.Domain.Entities.User", null)
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsMany("WebChat.Domain.Entities.JoinRequest", "JoinRequests", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("SendTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("GroupId", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("JoinRequest", "Default");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");

                            b1.HasOne("WebChat.Domain.Entities.User", null)
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("JoinInvitations");

                    b.Navigation("JoinRequests");

                    b.Navigation("Members");

                    b.Navigation("Setting")
                        .IsRequired();
                });

            modelBuilder.Entity("WebChat.Domain.Entities.Message", b =>
                {
                    b.HasOne("WebChat.Domain.Entities.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebChat.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("WebChat.Domain.ValueObjects.FileMetadata", "Files", b1 =>
                        {
                            b1.Property<string>("Path")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<long?>("MessageId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<long>("Size")
                                .HasColumnType("bigint");

                            b1.HasKey("Path");

                            b1.HasIndex("MessageId");

                            b1.ToTable("FileMetadata", "Default");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.Navigation("Files");
                });

            modelBuilder.Entity("WebChat.Domain.Entities.User", b =>
                {
                    b.HasOne("WebChat.Domain.Entities.Conversation", null)
                        .WithOne()
                        .HasForeignKey("WebChat.Domain.Entities.User", "ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("WebChat.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SubscriberNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "Default");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("WebChat.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
