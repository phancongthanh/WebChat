/* tslint:disable */
/* eslint-disable */
/**
 * WebChat.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { FriendRequest } from '../dtos';
// @ts-ignore
import { UpdateFriendInfoCommand } from '../dtos';
// @ts-ignore
import { UserInfo } from '../dtos';
/**
 * FriendsApi - axios parameter creator
 * @export
 */
export const FriendsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsFriendIdRequestsDelete: async (friendId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('apiFriendsFriendIdRequestsDelete', 'friendId', friendId)
            const localVarPath = `/api/Friends/{friendId}/Requests`
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} friendId 
         * @param {FriendRequest} [friendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsFriendIdRequestsPost: async (friendId: string, friendRequest?: FriendRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('apiFriendsFriendIdRequestsPost', 'friendId', friendId)
            const localVarPath = `/api/Friends/{friendId}/Requests`
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(friendRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Friends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [friendId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsPost: async (friendId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Friends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (friendId !== undefined) {
                localVarQueryParameter['friendId'] = friendId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateFriendInfoCommand} [updateFriendInfoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsPut: async (updateFriendInfoCommand?: UpdateFriendInfoCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Friends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFriendInfoCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendsApi - functional programming interface
 * @export
 */
export const FriendsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FriendsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsFriendIdRequestsDelete(friendId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsFriendIdRequestsDelete(friendId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FriendsApi.apiFriendsFriendIdRequestsDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} friendId 
         * @param {FriendRequest} [friendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsFriendIdRequestsPost(friendId: string, friendRequest?: FriendRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsFriendIdRequestsPost(friendId, friendRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FriendsApi.apiFriendsFriendIdRequestsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FriendsApi.apiFriendsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [friendId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsPost(friendId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsPost(friendId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FriendsApi.apiFriendsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateFriendInfoCommand} [updateFriendInfoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFriendsPut(updateFriendInfoCommand?: UpdateFriendInfoCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFriendsPut(updateFriendInfoCommand, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FriendsApi.apiFriendsPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * FriendsApi - factory interface
 * @export
 */
export const FriendsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FriendsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsFriendIdRequestsDelete(friendId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFriendsFriendIdRequestsDelete(friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} friendId 
         * @param {FriendRequest} [friendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsFriendIdRequestsPost(friendId: string, friendRequest?: FriendRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiFriendsFriendIdRequestsPost(friendId, friendRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsGet(options?: any): AxiosPromise<Array<UserInfo>> {
            return localVarFp.apiFriendsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [friendId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsPost(friendId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFriendsPost(friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateFriendInfoCommand} [updateFriendInfoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFriendsPut(updateFriendInfoCommand?: UpdateFriendInfoCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiFriendsPut(updateFriendInfoCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendsApi - interface
 * @export
 * @interface FriendsApi
 */
export interface FriendsApiInterface {
    /**
     * 
     * @param {string} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApiInterface
     */
    apiFriendsFriendIdRequestsDelete(friendId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} friendId 
     * @param {FriendRequest} [friendRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApiInterface
     */
    apiFriendsFriendIdRequestsPost(friendId: string, friendRequest?: FriendRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApiInterface
     */
    apiFriendsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserInfo>>;

    /**
     * 
     * @param {string} [friendId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApiInterface
     */
    apiFriendsPost(friendId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {UpdateFriendInfoCommand} [updateFriendInfoCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApiInterface
     */
    apiFriendsPut(updateFriendInfoCommand?: UpdateFriendInfoCommand, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * FriendsApi - object-oriented interface
 * @export
 * @class FriendsApi
 * @extends {BaseAPI}
 */
export class FriendsApi extends BaseAPI implements FriendsApiInterface {
    /**
     * 
     * @param {string} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public apiFriendsFriendIdRequestsDelete(friendId: string, options?: RawAxiosRequestConfig) {
        return FriendsApiFp(this.configuration).apiFriendsFriendIdRequestsDelete(friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} friendId 
     * @param {FriendRequest} [friendRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public apiFriendsFriendIdRequestsPost(friendId: string, friendRequest?: FriendRequest, options?: RawAxiosRequestConfig) {
        return FriendsApiFp(this.configuration).apiFriendsFriendIdRequestsPost(friendId, friendRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public apiFriendsGet(options?: RawAxiosRequestConfig) {
        return FriendsApiFp(this.configuration).apiFriendsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [friendId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public apiFriendsPost(friendId?: string, options?: RawAxiosRequestConfig) {
        return FriendsApiFp(this.configuration).apiFriendsPost(friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateFriendInfoCommand} [updateFriendInfoCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public apiFriendsPut(updateFriendInfoCommand?: UpdateFriendInfoCommand, options?: RawAxiosRequestConfig) {
        return FriendsApiFp(this.configuration).apiFriendsPut(updateFriendInfoCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

