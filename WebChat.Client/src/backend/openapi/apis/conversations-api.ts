/* tslint:disable */
/* eslint-disable */
/**
 * WebChat.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ConversationInfo } from '../dtos';
// @ts-ignore
import { Message } from '../dtos';
/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export const ConversationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdDelete: async (conversationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdDelete', 'conversationId', conversationId)
            const localVarPath = `/api/Conversations/{conversationId}`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdGet: async (conversationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdGet', 'conversationId', conversationId)
            const localVarPath = `/api/Conversations/{conversationId}`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {boolean} [isHidden] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdHiddenPatch: async (conversationId: string, isHidden?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdHiddenPatch', 'conversationId', conversationId)
            const localVarPath = `/api/Conversations/{conversationId}/Hidden`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isHidden !== undefined) {
                localVarQueryParameter['isHidden'] = isHidden;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMembersHiddenMessagesPatch: async (conversationId: string, messageId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdMembersHiddenMessagesPatch', 'conversationId', conversationId)
            const localVarPath = `/api/Conversations/{conversationId}/Members/HiddenMessages`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (messageId !== undefined) {
                localVarQueryParameter['messageId'] = messageId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} [messageId] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesGet: async (conversationId: string, messageId?: number, count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdMessagesGet', 'conversationId', conversationId)
            const localVarPath = `/api/Conversations/{conversationId}/Messages`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (messageId !== undefined) {
                localVarQueryParameter['messageId'] = messageId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesMessageIdDelete: async (conversationId: string, messageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdMessagesMessageIdDelete', 'conversationId', conversationId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiConversationsConversationIdMessagesMessageIdDelete', 'messageId', messageId)
            const localVarPath = `/api/Conversations/{conversationId}/Messages/{messageId}`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} messageId 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesMessageIdFilesPathGet: async (conversationId: string, messageId: number, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdMessagesMessageIdFilesPathGet', 'conversationId', conversationId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiConversationsConversationIdMessagesMessageIdFilesPathGet', 'messageId', messageId)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('apiConversationsConversationIdMessagesMessageIdFilesPathGet', 'path', path)
            const localVarPath = `/api/Conversations/{conversationId}/Messages/{messageId}/Files/{path}`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)))
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {string} [text] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesPost: async (conversationId: string, text?: string, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('apiConversationsConversationIdMessagesPost', 'conversationId', conversationId)
            const localVarPath = `/api/Conversations/{conversationId}/Messages`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversationsApi - functional programming interface
 * @export
 */
export const ConversationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdDelete(conversationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdDelete(conversationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdGet(conversationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdGet(conversationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {boolean} [isHidden] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdHiddenPatch(conversationId: string, isHidden?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdHiddenPatch(conversationId, isHidden, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdHiddenPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdMembersHiddenMessagesPatch(conversationId: string, messageId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdMembersHiddenMessagesPatch(conversationId, messageId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdMembersHiddenMessagesPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} [messageId] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdMessagesGet(conversationId: string, messageId?: number, count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdMessagesGet(conversationId, messageId, count, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdMessagesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdMessagesMessageIdDelete(conversationId: string, messageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdMessagesMessageIdDelete(conversationId, messageId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdMessagesMessageIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} messageId 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdMessagesMessageIdFilesPathGet(conversationId: string, messageId: number, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdMessagesMessageIdFilesPathGet(conversationId, messageId, path, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdMessagesMessageIdFilesPathGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {string} [text] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsConversationIdMessagesPost(conversationId: string, text?: string, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsConversationIdMessagesPost(conversationId, text, files, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsConversationIdMessagesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConversationsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConversationsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.apiConversationsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ConversationsApi - factory interface
 * @export
 */
export const ConversationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdDelete(conversationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiConversationsConversationIdDelete(conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdGet(conversationId: string, options?: any): AxiosPromise<ConversationInfo> {
            return localVarFp.apiConversationsConversationIdGet(conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {boolean} [isHidden] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdHiddenPatch(conversationId: string, isHidden?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiConversationsConversationIdHiddenPatch(conversationId, isHidden, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMembersHiddenMessagesPatch(conversationId: string, messageId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiConversationsConversationIdMembersHiddenMessagesPatch(conversationId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} [messageId] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesGet(conversationId: string, messageId?: number, count?: number, options?: any): AxiosPromise<Array<Message>> {
            return localVarFp.apiConversationsConversationIdMessagesGet(conversationId, messageId, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesMessageIdDelete(conversationId: string, messageId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiConversationsConversationIdMessagesMessageIdDelete(conversationId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {number} messageId 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesMessageIdFilesPathGet(conversationId: string, messageId: number, path: string, options?: any): AxiosPromise<File> {
            return localVarFp.apiConversationsConversationIdMessagesMessageIdFilesPathGet(conversationId, messageId, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {string} [text] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsConversationIdMessagesPost(conversationId: string, text?: string, files?: Array<File>, options?: any): AxiosPromise<number> {
            return localVarFp.apiConversationsConversationIdMessagesPost(conversationId, text, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConversationsGet(options?: any): AxiosPromise<Array<ConversationInfo>> {
            return localVarFp.apiConversationsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConversationsApi - interface
 * @export
 * @interface ConversationsApi
 */
export interface ConversationsApiInterface {
    /**
     * 
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdDelete(conversationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdGet(conversationId: string, options?: RawAxiosRequestConfig): AxiosPromise<ConversationInfo>;

    /**
     * 
     * @param {string} conversationId 
     * @param {boolean} [isHidden] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdHiddenPatch(conversationId: string, isHidden?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} conversationId 
     * @param {number} [messageId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdMembersHiddenMessagesPatch(conversationId: string, messageId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} conversationId 
     * @param {number} [messageId] 
     * @param {number} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdMessagesGet(conversationId: string, messageId?: number, count?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Message>>;

    /**
     * 
     * @param {string} conversationId 
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdMessagesMessageIdDelete(conversationId: string, messageId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} conversationId 
     * @param {number} messageId 
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdMessagesMessageIdFilesPathGet(conversationId: string, messageId: number, path: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @param {string} conversationId 
     * @param {string} [text] 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsConversationIdMessagesPost(conversationId: string, text?: string, files?: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    apiConversationsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ConversationInfo>>;

}

/**
 * ConversationsApi - object-oriented interface
 * @export
 * @class ConversationsApi
 * @extends {BaseAPI}
 */
export class ConversationsApi extends BaseAPI implements ConversationsApiInterface {
    /**
     * 
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdDelete(conversationId: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdDelete(conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdGet(conversationId: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdGet(conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {boolean} [isHidden] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdHiddenPatch(conversationId: string, isHidden?: boolean, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdHiddenPatch(conversationId, isHidden, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {number} [messageId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdMembersHiddenMessagesPatch(conversationId: string, messageId?: number, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdMembersHiddenMessagesPatch(conversationId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {number} [messageId] 
     * @param {number} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdMessagesGet(conversationId: string, messageId?: number, count?: number, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdMessagesGet(conversationId, messageId, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdMessagesMessageIdDelete(conversationId: string, messageId: number, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdMessagesMessageIdDelete(conversationId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {number} messageId 
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdMessagesMessageIdFilesPathGet(conversationId: string, messageId: number, path: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdMessagesMessageIdFilesPathGet(conversationId, messageId, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {string} [text] 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsConversationIdMessagesPost(conversationId: string, text?: string, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsConversationIdMessagesPost(conversationId, text, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public apiConversationsGet(options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).apiConversationsGet(options).then((request) => request(this.axios, this.basePath));
    }
}

